
python -m venv venv  
venv/scripts/activate

pip install django   

cria projeto
---------
django-admin startproject agenda .


cria apps (tipo as areas do site, cliente, produto, endereco)
-----------
python manage.py startapp contatos

configura settings
-----------

INSTALLED_APPS = [
    ...,
    'NomeDoAppQueCRiou.apps.ContatosConfig'
]

TEMPLATES = [
    {
        ....
        'DIRS': [BASE_DIR / 'templates'],
        ....
    }
]
STATICFILES_DIRS = [BASE_DIR / 'templates' / 'static']

configura pagina inicial (urls.py do projeto)
--------
urlpatterns = [
    path('admin/', admin.site.urls),
    ....
    path('', include('nomedoappquecriou.urls')),
]


cria o arquivo de urls para os apps (nomedoappquecriou/urls.py)
-------
from django.urls import path
from . import views

urlpatterns = [
    path('', views.index, name = 'index'),

]


cria os templates na raiz do projeto/pasta do vscode
---------
templates/static
templates/base.html (arquivo modelo)

cria as views html para o app
---------
nomedoapp/templates/index.html
nomedoapp/templates/teste.html


cria as classes views do app
---------
nomedoappquecriou/views.py

from django.shortcuts import render

# Create your views here.
def index(request):
    return render(request, 'contatos/index.html')

rodar server web
-------
python manage.py runserver   


Models
------
cria o modelo para o app (classe com os atributos que vai salvar no db)
nomedoappquecriou/models.py

from django.db import models
from django.utils import timezone

# Create your models here.


#Foreign key normalmente são outros apps, aí import a classe quando for assim
#------
class Categoria(models.Model):
    nome = models.CharField(max_length=255)
#----

class Contato(models.Model):
    nome = models.CharField(max_length=255)
    sobrenome = models.CharField(max_length=255, blank=True)
    ....
    categoria = models.ForeignKey(Categoria,on_delete=models.DO_NOTHING)

cria as migrações (engine que transforma essa classe em table no db)(tipo o commit do git)
--------
python manage.py makemigrations


aplica as migrations no db (tipo o push do git)
--------
python manage.py migrate


cria o usuario e senha admin
-----------
python manage.py createsuperuser


associa seu app e models na area admin
-----
nomedoappquecriou/admin.py

from django.contrib import admin
from . models import NomeDoAppQueCriou

# Register your models here.

admin.site.register(NomeDoAppQueCriou)


cria o __str__ do model pra aparecer na area admin, tipo uma representação do objeto 
que quer que apareça na listagem na area admin senão vai ficar aparecendo object(0), object (1)
BESTEIRA UTILIZE O METODO ABAIXO
----
nome/models.py

class NomeDoAppQueCriou(models.Model):
    nome = models.CharField(max_length=255)

    def __str__(self):
        return self.nome

cria uma classe de exibição e filtro do model na area admin
-------

nomedoappquecriou/admin.py

class ContatoAdmin(admin.ModelAdmin):
    list_display = ('id', 'nome', 'sobrenome', 'telefone', 'email','categoria')
    list_display_links = ('id', 'nome')
    list_filter = ('nome', 'sobrenome')
    list_per_page = 10
    search_fields = ('nome', 'telefone')

admin.site.register(Contato, ContatoAdmin)


cria  urls e views (exibir detalhes por exemplo)
-----
nomedoappquecriou/urls.py

urlpatterns = [
    path('', views.index, name = 'index'), #aponta pra view index, sem parametros
    path('<int:contato_id>', views.detalhes, name = 'detalhes'), #aponta pra view detalhes passando ID
]

nomedoappquecriou/views.py

def index(request):
    contatos = Contato.objects.all() #get all objects / select * from app
    return render(request, 'contatos/index.html', {'contatos' : contatos}) #passa como json


def detalhes(request, contato_id):
    contato = Contato.objects.get(id = contato_id)
    return render(request, 'contatos/detalhes.html', {'contato' : contato}) #passa como json




{% if contatos.has_next %}
            <li class="page-item"><a class="page-link" href="?page={{contatos.next}}">Próxima Página</a></li>
            {%endif%}